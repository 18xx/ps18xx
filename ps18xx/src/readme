% Please to NOT distribute this version to other people now! See also
% the copyright in the PS file (who corrects my bad english?)

	ps18xx -- generate 18xx postscript maps and tile lists
				(c) M. Klose

	$Header: README[1.11] Thu Apr 25 15:29:24 1996 doko@cs.tu-berlin.de saved $

% ----------------------------------------------------------------------
%				COPYRIGHT
%		Matthias Klose (doko@cs.tu-berlin.de)
%
% ps18xx is "postcard" ware. If you use this code or part of this,
% you are invited to send me a nice railway postcard to the address below.
% Until now I did not get even a single card :-(
%
% You are allowed to use this code and to modify the source, provided
% you leave this copyright notice and the acknowledgements in it.
%
% You are allowed to include the code in your own programs, provided
% - you distribute your programs for free or for a fee, which is not
%   more than DM 20,-- or $15.
% - you show the copyright notice in the same places as your own
%   copyright notice,
% - you ask the users of your program to send a postcard, if they use
%   this or modified code.
%
% You are not allowed to include this or derived code in any
% 18xx related program that is distributed as commercial software.
%
%						Matthias Klose
%						Dillgesstr. 30
%						D-12249 Berlin
%						doko@cs.tu-berlin.de
%

% ----------------------------------------------------------------------
%				ACKNOWLEDGMENTS
% ----------------------------------------------------------------------

Several people helped in debugging existing maps and tiles. Following
people made contributions:

- Paul R. Work (pwork@ss2.sews.wpafb.af.mil) created the 1835 and 1837
  map, 1835 and 1837 specific tiles and the tile list, added bridges.

- Nick Roworth (nroworth@uk.oracle.com) created the 1829-south map
  and debugged the 1853 and other map and tiles.

- Steve Thomas (Steve.Thomas@insignia.co.uk) created the 1856 map and
  1856 specific tiles and added code to print the map labels in reverse
  order.

% ----------------------------------------------------------------------
%				INSTALLATION
% ----------------------------------------------------------------------

This distribution comes as

	- a shar file. remove all the thext before the 'cut line', save
	  the file and type: sh <file>. This creates the necessary files
	  in the current directory.

	- should be something useful for DOS or Mac users. is zip acceptable?

	- I had problems to print the file on printers with less than
	  2MB memory (old Apple LaserWriters).

	- Try to preview the file with ghostscript and ghostview.
	  Even if you cannot print the file, you can convert it with
	  ghostscript to several bitmap formats (like GIF or BMP).

What games are supported?

	- 1825u1, 1829 north, 1829 south, 1830, 1835, 1837, 1939i, 1850s,
	  1853, 1856, 1870 and 1899

	- if you want to adapt this code for another game, you'll need
	  one or two days time. look at "how to add a new variant".

How to use the program:

	- your window system or your printer has to be able to
	  understand PostScript Level 2. If you do not own a
          PostScript printer, fetch 'GhostView' and 'GhostScript' from
          your nearest ftp server to use this software.
	  With GhostScript you can convert your images to GIF and
          Bitmap Format as well.

	- ps18xx should determine if you have a color or b/w device; if this
	  does not work, insert after the first comment lines a line like

		/haveColor true def

	  replace the 'true' with 'false', if you have a b/w device

	- print the map and tile list of your choice:

		<print command> M<game>.ps	(print the map)
		<print command> T<game>.ps	(print the tile list)

	- to print larger maps on multiple pages, use the poster package
	  included in the poster subdirectory

How to keep track of your games:

	- copy the map file and edit the copied file (but only this).

	- look at the end of the file: You will see something like:

          % =================================
          % INSERT YOUR TILES AND TOKENS HERE
          % =================================

	  mapFrame

	- insert your tile and token lays directly after the comment lines
          (starting with '%') and before the 'mapFrame' line.

	- to lay a tile:

	  (L14/sw) 5 [(NER)] LayTile

	  lay tile number 5 in orientation south-west on hex L14. put
          a NER token on the tile.

	  (A7/w) 9 [] LayTile

	  lay tile number 9 in orientation west on hex A7. Although there
          are no stations, you have to add the empty brackets.

	- to lay a token:

	  you have to go up in the list of tiles already laid on the map
	  and to find the tile which lays on the hex where you want to lay
          the token. copy this line and simply add the token.

	- hex names: normally, you don't need to type in hexnames. A hex name
	  appears at the last place of the station list and begins with a '#'.
	  If you specify hex names, they must be behind all stations!

	- generate the game specific map or tile list:

		make M<game>.ps		or	make T<game>.ps

	  where game is currently one of 29n, 29s, 30, 35, 37, 39i, 50s,
	  53, 56 or 70.


How to add a new variant:

	- generate GTILES.ps (i.e. make GTILES.ps) and print it.

	- create two files xx-tc.ps and xx-map.ps.

	- "Generic tiles" are tile descriptions, which cannot be used
	  directly for a 18xx variant. The description of generic tiles
	  include:
	    * track and station information
	    * a position, where a label (OO, BMG, B, ...) could be placed
	    * a position, where a value (10, 20, ...) could be placed
	    * a position, where a terrain symbol (mountain, water)
	      could be placed

	- Generic tiles have an arbitrary orientation (usually I took the
	  orientations of 1829, some other of 1830).

	- Orientation begins to count with 0 at the SW edge and continues
	  counterclockwise (NOTE: this is different from most Email games!)

	- In xx-map.ps edit mapRows and mapCols and adjust mapScale to
	  a value that the map fits on one page.

	- Now you have to define the relation from generic to variant tiles. 
	  A "variant tile" includes the description of the generic tile, a
	  terrain type, a label, a color, a value, an orientation and a
	  quantity. Why different orientations? a #23 tile is different in
	  1829 and 1830, a #8 tile is different in 1830 and 1835 and so on.
	  The orientation describes how often you must rotate a generic tile
	  to get a "variant" tile in position 0.

	  To define the tiles (in xx-tc.ps): 

	  	tileCodes  32 [  32 0 //tlRusset //tlPlain ()    (70)  1 ] put
		tileCodes  48 [  32 0 //tlGrey   //tlPlain ()   (100)  1 ] put

	  where the first number (32 and 48) is the number of the tile you
	  find in your game. What follows are the generic number, orientation,
	  color, terrain type, label, value and quantity. Have a look at the
	  1829-north dictionary.

	  Look at the "Generic tiles" list, if you find an appropriate tile.
	  If you do not find a tile, define one (or mail me how it looks like).
	  You can also refer to undefined tiles; an "undefined" is printed
	  across the tile.

	  Now you should be able to print "your" availability list.

	- Definition of tiles: Look at the "Tile_XXX" procedures. Hope this
	  helps ...
	  If you define new tiles, use the numbers from the game if they are
	  not already used. If already used, use number between 400 and 499.
	  PLEASE INFORM ME ABOUT NEW TILE NUMBERS!

	- Now draw the map (see procedure mapDefault in the dictionary).
	  by simply laying the "variant" tiles you have defined.
	  It's the same thing as laying tiles on a map, but the tile numbers
	  are negative: are not printed!

	  If there is more than one station, the SW marker is first, then W,
	  then NW, ...

	  Look at the beginning of the file for various constant definitions.

	  If there are "special" hexes on the map, please define new tiles and
	  use tile numbers between 540 and 599.

	- add a rule to make your map in the Makefile and call
	  "make 18xx", where xx is your new game.

	- please send me the definitions for the new maps so that I can
	  include them in the distribution.

% ----------------------------------------------------------------------
%				  TODO
% ----------------------------------------------------------------------

There are several things that need to be done:

	- write a command script, that eliminates the necessity for a
	  "user" to edit the PS file directly. This should be written
	  in Python or Tcl, which is both available on UNIX, DOS, OS/2 and Mac.
	- fix bugs.
	- fix my english.

Happy hacking

	Matthias (doko@cs.tu-berlin.de)
